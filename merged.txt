
// --------- File: ..\stock_market_simulator\batch_runner.py ---------
# stock_market_simulator/batch_runner.py

import subprocess
import sys

def main():
    """
    This script calls 'stock_market_simulator/main.py' multiple times,
    each time with:
      1) A config file path
      2) An output directory name
    so that all results go to 'reports/<output_dir_name>/...'
    """
    name_postfix = "01052025"
    name_prefix = "Strategy_Sweep_4"

    runs = [
        ("config/configA.txt", f"{name_prefix}_5years_{name_postfix}"),
        ("config/configB.txt", f"{name_prefix}_10years_{name_postfix}"),
        ("config/configC.txt", f"{name_prefix}_15years_{name_postfix}"),
        ("config/configD.txt", f"{name_prefix}_20years_{name_postfix}")
        # Add more configs here if desired
    ]

    for config_file, out_dir in runs:
        print(f"\n=== Running simulation for config '{config_file}' => '{out_dir}' ===")
        cmd = [sys.executable, "-m", "stock_market_simulator.main", config_file, out_dir]
        subprocess.run(cmd, check=True)

    print("\nAll simulations completed successfully.")


if __name__ == "__main__":
    main()

// --------- End of File: ..\stock_market_simulator\batch_runner.py ---------


// --------- File: ..\stock_market_simulator\data\data_fetcher.py ---------
# stock_market_simulator/data/data_fetcher.py

import os
import pandas as pd
import yfinance as yf

# We could also import from data_local_cache if we want advanced caching:
# from stock_market_simulator.data.data_local_cache import get_cached_data, store_cached_data

# In-memory cache to avoid redundant downloads during a single run
_data_cache = {}

def load_historical_data(ticker: str, start_date="1980-01-01",
                         local_data_dir="data/local_csv") -> pd.DataFrame:
    """
    Load historical data for 'ticker' from a local CSV if available;
    otherwise download from Yahoo Finance and store a local copy.
    """
    global _data_cache
    if ticker in _data_cache:
        print(f"[CACHE HIT] {ticker} in-memory.")
        return _data_cache[ticker]

    # 1) Attempt local CSV
    safe_ticker = ticker.replace('^', '_')
    csv_filename = f"{safe_ticker}.csv"
    local_csv_path = os.path.join(local_data_dir, csv_filename)
    if os.path.exists(local_csv_path):
        print(f"[LOCAL CSV] Loading {ticker} from {local_csv_path}")
        df = pd.read_csv(
            local_csv_path,
            skiprows=3,  # skip the first 3 lines (Price..., Ticker..., Date....)
            header=None,  # no header row in the remaining data
            names=["Date", "Close", "High", "Low", "Open", "Volume"],  # define columns
            parse_dates=["Date"],  # parse first column as date
            index_col="Date"  # make "Date" the index
        )
    else:
        print(f"[YAHOO] Downloading {ticker} from {start_date}")
        df = yf.download(ticker, start=start_date, progress=False)
        # If successful, store a local copy
        if not df.empty:
            if not os.path.exists(local_data_dir):
                os.makedirs(local_data_dir)
            df.to_csv(local_csv_path)

    if df.empty:
        raise ValueError(f"No data found for ticker: {ticker}")

    if 'Close' not in df.columns:
        raise ValueError(f"Missing 'Close' in DataFrame for {ticker}")

    # Keep only 'Close', drop NaNs, sort
    df = df[['Close']].copy()
    df.dropna(inplace=True)
    df.sort_index(inplace=True)

    _data_cache[ticker] = df
    return df

// --------- End of File: ..\stock_market_simulator\data\data_fetcher.py ---------


// --------- File: ..\stock_market_simulator\data\data_local_cache.py ---------
# stock_market_simulator/data/data_local_cache.py

"""
Optional module for more advanced local caching mechanisms.

Currently, it's just a placeholder to illustrate how you'd expand
caching beyond a simple in-memory dict. For example, you could
serialize DataFrames to a local SQLite DB or keep them in
a more robust cache solution.
"""

# Example placeholders:
_LOCAL_CACHE = {}

def get_cached_data(ticker: str):
    """
    Retrieve a DataFrame from local cache if it exists.
    """
    # In a real scenario, you'd do disk-based or DB lookups here.
    return _LOCAL_CACHE.get(ticker, None)

def store_cached_data(ticker: str, df):
    """
    Store a DataFrame to local cache, possibly writing to disk or DB.
    """
    _LOCAL_CACHE[ticker] = df

// --------- End of File: ..\stock_market_simulator\data\data_local_cache.py ---------


// --------- File: ..\stock_market_simulator\main.py ---------
# stock_market_simulator/main.py

import os
import sys
import shutil
import matplotlib.pyplot as plt
from io import StringIO
from collections import defaultdict

from stock_market_simulator.utils.config_parser import parse_config_file
from stock_market_simulator.data.data_fetcher import load_historical_data
from stock_market_simulator.simulation.simulator import run_configured_sweep

def generate_boxplots(approach_data, output_dir, out_name):
    """
    Generate box-and-whisker plots for each metric across all approaches,
    including the NEW average_annual_return.
    """
    import matplotlib.colors as mcolors

    # Now we have four metrics:
    metrics = {
        'lowest_valley': 'Lowest Valley',
        'highest_peak': 'Highest Peak',
        'final_result': 'Final Result',
        'avg_annual_return': 'Average Annual Return'   # NEW
    }

    colors = list(mcolors.TABLEAU_COLORS.values())

    for metric_key, metric_label in metrics.items():
        data = []
        approaches = []
        approach_colors = {}

        # Gather data for this metric
        for i, (approach_name, (summary, runs_list, _)) in enumerate(approach_data.items()):
            # runs_list => (lv, hv, fr, aar, start_date)
            if metric_key == 'lowest_valley':
                metric_values = [run[0] for run in runs_list]
            elif metric_key == 'highest_peak':
                metric_values = [run[1] for run in runs_list]
            elif metric_key == 'final_result':
                metric_values = [run[2] for run in runs_list]
            elif metric_key == 'avg_annual_return':
                metric_values = [run[3] for run in runs_list]
            else:
                continue

            if metric_values:
                data.append(metric_values)
                approaches.append(approach_name)
                approach_colors[approach_name] = colors[i % len(colors)]

        if not data:
            print(f"No data for metric '{metric_key}'. Skipping plot.")
            continue

        # Determine y-limits
        all_values = [val for sublist in data for val in sublist]
        y_min = min(all_values) * 0.95
        y_max = max(all_values) * 1.05

        # Create the boxplot
        plt.figure(figsize=(10, 6))
        # NOTE: Matplotlib v3.9+ renamed 'labels' to 'tick_labels'
        box = plt.boxplot(data, tick_labels=approaches, patch_artist=True, showfliers=True)

        # Color the boxes
        for patch, approach in zip(box['boxes'], approaches):
            patch.set_facecolor(approach_colors[approach])

        plt.title(f'{metric_label} Across Approaches', fontsize=14)
        plt.xlabel('Approaches', fontsize=12)
        plt.ylabel(metric_label, fontsize=12)
        plt.ylim(y_min, y_max)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        plot_filename = f"{metric_key}_boxplot_{out_name}.png"
        plot_path = os.path.join(output_dir, plot_filename)
        plt.savefig(plot_path)
        plt.close()

        print(f"Saved boxplot for '{metric_key}' to '{plot_path}'.")


def main():
    if len(sys.argv) < 3:
        print("Usage: python -m stock_market_simulator.main <config_file> <output_dir_name>")
        return

    config_path = sys.argv[1]
    out_name = sys.argv[2]

    base_dir = "reports"
    out_dir = os.path.join(base_dir, out_name)
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    buffer = StringIO()

    def myprint(*args, **kwargs):
        print(*args, **kwargs)
        print(*args, file=buffer, **{k:v for k,v in kwargs.items() if k!='file'})

    try:
        years, stepsize, approaches = parse_config_file(config_path)
        approach_data = {}

        for approach_name, ticker_strat_dict in approaches:
            needed_tickers = set(ticker_strat_dict.keys())
            all_dfs = {}
            for tkSym in needed_tickers:
                df = load_historical_data(tkSym)
                all_dfs[tkSym] = df

            try:
                summary, runs_list, final_map = run_configured_sweep(
                    all_dfs, approach_name, ticker_strat_dict, years, stepsize, 10000.0
                )
            except ValueError as e:
                myprint(f"Approach {approach_name} => ERROR: {e}")
                continue

            approach_data[approach_name] = (summary, runs_list, final_map)

            # Print existing metrics
            myprint(f"=== Approach: {approach_name} ===")

            lv = summary["lowest_valley"]
            myprint(f"lowest_valley => "
                    f"min:{lv['min_val']:.2f} (start {lv['min_start_date'].date()}), "
                    f"max:{lv['max_val']:.2f} (start {lv['max_start_date'].date()}), "
                    f"avg:{lv['avg_val']:.2f}")

            hv = summary["highest_peak"]
            myprint(f"highest_peak  => "
                    f"min:{hv['min_val']:.2f} (start {hv['min_start_date'].date()}), "
                    f"max:{hv['max_val']:.2f} (start {hv['max_start_date'].date()}), "
                    f"avg:{hv['avg_val']:.2f}")

            fr = summary["final_result"]
            myprint(f"final_result  => "
                    f"min:{fr['min_val']:.2f} (start {fr['min_start_date'].date()}), "
                    f"max:{fr['max_val']:.2f} (start {fr['max_start_date'].date()}), "
                    f"avg:{fr['avg_val']:.2f}")

            # NEW: Print the average_annual_return summary
            aar = summary["avg_annual_return"]
            myprint(f"avg_annual_return => "
                    f"min:{aar['min_val']:.2f}% (start {aar['min_start_date'].date()}), "
                    f"max:{aar['max_val']:.2f}% (start {aar['max_start_date'].date()}), "
                    f"avg:{aar['avg_val']:.2f}%\n")

        # If no successful approaches, skip everything else
        if not approach_data:
            myprint("No successful approaches => exit.")
        else:
            # Rank histogram logic (unchanged).
            # Note: You might continue to do rank histogram for final_result only, or skip it for the new metric.
            approach_start_sets = []
            for aname, data_tuple in approach_data.items():
                final_map = data_tuple[2]  # summary, runs_list, final_map
                approach_start_sets.append(set(final_map.keys()))
            common_starts = set.intersection(*approach_start_sets) if approach_start_sets else set()

            if not common_starts:
                myprint("No common starts => skipping rank histogram.")
            else:
                rank_counts = {}
                for aname in approach_data.keys():
                    rank_counts[aname] = defaultdict(int)

                # For each start date in common, rank by final_result (only)
                for sd in common_starts:
                    results = []
                    for aname in approach_data.keys():
                        fm = approach_data[aname][2]
                        val = fm[sd]
                        results.append((aname, val))
                    # Sort descending
                    results.sort(key=lambda x: x[1], reverse=True)
                    for i, (a, _) in enumerate(results):
                        rank_counts[a][i+1] += 1

                import matplotlib.pyplot as plt
                from matplotlib.patches import Patch

                n_approaches = len(approach_data)
                rank_range = range(1, n_approaches + 1)
                bar_data = {r: [rank_counts[ap][r] for ap in approach_data.keys()] for r in rank_range}

                color_map = plt.colormaps['tab10'].resampled(n_approaches)  # Resample the colormap
                approach_colors = {}
                for i, ap in enumerate(approach_data.keys()):
                    approach_colors[ap] = color_map(i)

                fig, ax = plt.subplots(figsize=(8, 5))

                for r in rank_range:
                    y_vals = bar_data[r]
                    bottom = 0
                    for i, ap in enumerate(approach_data.keys()):
                        height = y_vals[i]
                        ax.bar(r, height, bottom=bottom,
                               color=approach_colors[ap], edgecolor='black')
                        bottom += height

                legend_patches = []
                for i, ap in enumerate(approach_data.keys()):
                    patch = Patch(color=approach_colors[ap], label=ap)
                    legend_patches.append(patch)

                ax.legend(handles=legend_patches, bbox_to_anchor=(1.05, 1), loc='upper left')
                ax.set_xticks(list(rank_range))
                ax.set_xlabel("Rank (1=best, N=worst)")
                ax.set_ylabel("Count (# of times approach had this rank)")
                ax.set_title("Rank Histogram Across Common Monthly Starts")
                plt.tight_layout()

                hist_path = os.path.join(out_dir, "histogram.png")
                plt.savefig(hist_path)
                plt.close()

                myprint(f"Histogram saved to {hist_path}")

            # Now generate boxplots (including the new avg_annual_return)
            generate_boxplots(approach_data, out_dir, out_name)

    finally:
        # Save the console buffer to 'report.txt'
        report_path = os.path.join(out_dir, "report.txt")
        with open(report_path, 'w') as outf:
            outf.write(buffer.getvalue())

        # Copy config
        config_copy_path = os.path.join(out_dir, "config.txt")
        shutil.copy(config_path, config_copy_path)

        buffer.close()

if __name__ == "__main__":
    main()

// --------- End of File: ..\stock_market_simulator\main.py ---------


// --------- File: ..\stock_market_simulator\profile_runner.py ---------
# profile_runner.py

import cProfile
import pstats
from stock_market_simulator.batch_runner import main  # <-- Import the 'main' function from your batch_runner

def run_batch_with_profiling():
    """
    Wraps the batch_runner main() call with cProfile, generating 'batch_output.prof'.
    """
    profiler = cProfile.Profile()
    profiler.enable()

    # Run all the batches
    main()

    profiler.disable()

    # Sort results by total time (descending) and dump them to a file
    stats = pstats.Stats(profiler).sort_stats(pstats.SortKey.TIME)
    stats.dump_stats("batch_output.prof")
    # Optionally print top 20 lines to console
    stats.print_stats(20)

if __name__ == "__main__":
    run_batch_with_profiling()

// --------- End of File: ..\stock_market_simulator\profile_runner.py ---------


// --------- File: ..\stock_market_simulator\simulation\execution.py ---------
# stock_market_simulator/simulation/execution.py

from stock_market_simulator.simulation.portfolio import Portfolio, Order

def execute_orders(current_price, portfolio: Portfolio, day_index):
    """
    Executes any existing orders in the portfolio if their conditions are met.
    Removes executed orders from the portfolio's order list.
    """
    executed = []
    for order in portfolio.orders:
        # MARKET
        if order.order_type == 'market':
            if order.side == 'buy':
                to_buy = (portfolio.cash / current_price if order.quantity is None
                          else min(order.quantity, portfolio.cash / current_price))
                if to_buy > 0:
                    portfolio.shares += to_buy
                    portfolio.cash -= to_buy * current_price
            else:  # sell
                to_sell = (portfolio.shares if order.quantity is None
                           else min(order.quantity, portfolio.shares))
                if to_sell > 0:
                    portfolio.cash += to_sell * current_price
                    portfolio.shares -= to_sell
            executed.append(order)

        # LIMIT
        elif order.order_type == 'limit':
            if order.side == 'buy' and current_price <= order.limit_price:
                to_buy = (portfolio.cash / current_price if order.quantity is None
                          else min(order.quantity, portfolio.cash / current_price))
                if to_buy > 0:
                    portfolio.shares += to_buy
                    portfolio.cash -= to_buy * current_price
                executed.append(order)
            elif order.side == 'sell' and current_price >= order.limit_price:
                to_sell = (portfolio.shares if order.quantity is None
                           else min(order.quantity, portfolio.shares))
                if to_sell > 0:
                    portfolio.cash += to_sell * current_price
                    portfolio.shares -= to_sell
                executed.append(order)

        # STOP
        elif order.order_type == 'stop':
            if order.side == 'sell' and current_price <= order.stop_price:
                to_sell = (portfolio.shares if order.quantity is None
                           else min(order.quantity, portfolio.shares))
                if to_sell > 0:
                    portfolio.cash += to_sell * current_price
                    portfolio.shares -= to_sell
                executed.append(order)
            elif order.side == 'buy' and current_price >= order.stop_price:
                to_buy = (portfolio.cash / current_price if order.quantity is None
                          else min(order.quantity, portfolio.cash / current_price))
                if to_buy > 0:
                    portfolio.shares += to_buy
                    portfolio.cash -= to_buy * current_price
                executed.append(order)

        # TRAILING STOP
        elif order.order_type == 'trailing_stop':
            if order.side == 'sell':
                if order.highest_price is None:
                    order.highest_price = current_price
                if current_price > order.highest_price:
                    order.highest_price = current_price

                trigger = order.highest_price * (1 - (order.trail_percent or 0)/100.0)
                if current_price <= trigger:
                    to_sell = (portfolio.shares if order.quantity is None
                               else min(order.quantity, portfolio.shares))
                    if to_sell > 0:
                        portfolio.cash += to_sell * current_price
                        portfolio.shares -= to_sell
                    executed.append(order)

    # Remove all executed orders
    for e in executed:
        portfolio.orders.remove(e)

// --------- End of File: ..\stock_market_simulator\simulation\execution.py ---------


// --------- File: ..\stock_market_simulator\simulation\portfolio.py ---------
# stock_market_simulator/simulation/portfolio.py

class Order:
    def __init__(self, side, order_type,
                 limit_price=None, stop_price=None,
                 trail_percent=None, quantity=None):
        self.side = side
        self.order_type = order_type
        self.limit_price = limit_price
        self.stop_price = stop_price
        self.trail_percent = trail_percent
        self.quantity = quantity
        self.highest_price = None
        self.lowest_price = None
        self.placement_day = None


class Portfolio:
    def __init__(self, initial_cash=10000.0):
        self.cash = initial_cash
        self.shares = 0.0
        self.orders = []
        self.initial_value = initial_cash
        self.history = []
        self.strategy_state = {}

    def total_value(self, price: float) -> float:
        return self.cash + self.shares * price

// --------- End of File: ..\stock_market_simulator\simulation\portfolio.py ---------


// --------- File: ..\stock_market_simulator\simulation\simulator.py ---------
# stock_market_simulator/simulation/simulator.py

import pandas as pd
from stock_market_simulator.simulation.portfolio import Portfolio
from stock_market_simulator.simulation.execution import execute_orders

class HybridMultiFundPortfolio:
    """
    Combines multiple sub-portfolios (one per ticker),
    each with its own strategy and slice of the total cash.
    """
    def __init__(self, strategies_for_tickers: dict, initial_cash=10000.0):
        self.strategies_for_tickers = strategies_for_tickers
        self.initial_cash = initial_cash
        self.tickers = list(strategies_for_tickers.keys())
        self.sub_portfolios = []
        sub_cash = initial_cash / len(self.tickers)
        for tkSym in self.tickers:
            pf = Portfolio(sub_cash)
            self.sub_portfolios.append((tkSym, pf))
        self.history = []

    def total_value(self, day_prices: dict) -> float:
        """
        day_prices = { 'AAPL': float_price, 'MSFT': float_price, ... }
        """
        tv = 0.0
        for (sym, pf) in self.sub_portfolios:
            px = day_prices.get(sym, 0.0)
            tv += pf.total_value(px)
        return tv


def run_hybrid_multi_fund(dfs_dict, hybrid_pf: HybridMultiFundPortfolio):
    """
    Given a dict {ticker: DataFrame}, run day-by-day simulation.
    Return (history_percent_gains, final_index).
    """
    tickers = hybrid_pf.tickers
    main_tk = tickers[0]
    final_index = dfs_dict[main_tk].index
    hybrid_pf.history = []

    for day_i, dt in enumerate(final_index):
        day_prices = {}
        for tkSym in tickers:
            val = dfs_dict[tkSym].loc[dt, 'Close']
            if isinstance(val, pd.Series):
                val = val.iloc[0]
            cprice = float(val)
            day_prices[tkSym] = cprice

        # Execute pending orders and run strategy for each sub-portfolio
        for (sym, pf) in hybrid_pf.sub_portfolios:
            cur_price = day_prices[sym]
            execute_orders(cur_price, pf, day_i)

            strategy_func = hybrid_pf.strategies_for_tickers[sym]
            strategy_func(pf, dt, cur_price, day_i)

        tv = hybrid_pf.total_value(day_prices)
        pct = ((tv - hybrid_pf.initial_cash) / hybrid_pf.initial_cash) * 100
        hybrid_pf.history.append(pct)

    return hybrid_pf.history, final_index


def intersect_all_indexes(dfs_dict):
    """
    Intersect indexes among all DataFrames to ensure they're aligned.
    """
    all_idx = [df.index for df in dfs_dict.values()]
    if not all_idx:
        raise ValueError("No DataFrames to intersect!")
    common = all_idx[0]
    for idx in all_idx[1:]:
        common = common.intersection(idx)
    return common.sort_values()


def find_monthly_starts_first_open(common_idx):
    """
    For a given DateTimeIndex, find the first open date of each month.
    """
    by_ym = {}
    for dt in common_idx:
        ym = (dt.year, dt.month)
        if ym not in by_ym:
            by_ym[ym] = dt
    keys = sorted(by_ym.keys())
    monthly_starts = [by_ym[k] for k in keys]
    return monthly_starts


def run_configured_sweep(dfs_dict, approach_name, ticker_strat_dict, years, stepsize, initial_cash=10000.0):
    """
    Runs multiple subrange simulations, each lasting `years` years.
    Now also computes average annual return (CAGR).
    """
    common_idx = intersect_all_indexes(dfs_dict)
    if common_idx.empty:
        raise ValueError(f"No intersection for approach {approach_name}.")

    all_monthly_starts = find_monthly_starts_first_open(common_idx)
    selected_starts = all_monthly_starts[::stepsize]

    delta_days = pd.Timedelta(days=years * 365)

    results_list = []
    final_map = {}

    for start_date in selected_starts:
        end_date = start_date + delta_days
        if end_date > common_idx[-1]:
            continue

        final_subindex = common_idx[(common_idx >= start_date) & (common_idx < end_date)]
        if len(final_subindex) == 0:
            continue

        # Reindex each ticker
        sim_dfs = {}
        for tk, df_ticker in dfs_dict.items():
            subdf = df_ticker.loc[(df_ticker.index >= start_date) & (df_ticker.index < end_date)]
            subdf = subdf.reindex(final_subindex, method='ffill')
            sim_dfs[tk] = subdf

        # Run the simulation
        pf = HybridMultiFundPortfolio(ticker_strat_dict, initial_cash=initial_cash)
        hist, _ = run_hybrid_multi_fund(sim_dfs, pf)
        if not hist:
            continue

        lv = min(hist)     # lowest_valley
        hv = max(hist)     # highest_peak
        fr = hist[-1]      # final_result (percent total return)

        # 1) Compute the Average Annual Return (CAGR)
        # If final result = +X% after `years`, then total growth is (1 + X/100).
        # CAGR = (total_growth)^(1/years) - 1
        # Multiply by 100 to get a percentage.
        total_growth = 1.0 + (fr / 100.0)
        if years > 0:
            cagr = (total_growth ** (1 / years) - 1) * 100.0
        else:
            cagr = 0.0  # fallback if years=0 (shouldn't happen in normal config)

        # 2) Save to results_list
        # Now each run has 5 items: (lowest_val, highest_peak, final_result, average_annual_return, start_date)
        results_list.append((lv, hv, fr, cagr, start_date))

        # We still store final_map => final result only, or we could store cagr too if needed
        final_map[start_date] = fr

    if not results_list:
        raise ValueError(f"No valid runs for approach '{approach_name}' (years={years}).")

    # Summaries
    lows = [x[0] for x in results_list]   # from x = (lv, hv, fr, cagr, start_date)
    highs = [x[1] for x in results_list]
    finals = [x[2] for x in results_list]
    aars = [x[3] for x in results_list]

    def avg(arr):
        return sum(arr) / len(arr) if arr else None

    summary = {
        "lowest_valley": {
            "min_val": min(lows),
            "min_start_date": next(x for x in results_list if x[0] == min(lows))[4],
            "max_val": max(lows),
            "max_start_date": next(x for x in results_list if x[0] == max(lows))[4],
            "avg_val": avg(lows)
        },
        "highest_peak": {
            "min_val": min(highs),
            "min_start_date": next(x for x in results_list if x[1] == min(highs))[4],
            "max_val": max(highs),
            "max_start_date": next(x for x in results_list if x[1] == max(highs))[4],
            "avg_val": avg(highs)
        },
        "final_result": {
            "min_val": min(finals),
            "min_start_date": next(x for x in results_list if x[2] == min(finals))[4],
            "max_val": max(finals),
            "max_start_date": next(x for x in results_list if x[2] == max(finals))[4],
            "avg_val": avg(finals)
        },
        # NEW: average annual return
        "avg_annual_return": {
            "min_val": min(aars),
            "min_start_date": next(x for x in results_list if x[3] == min(aars))[4],
            "max_val": max(aars),
            "max_start_date": next(x for x in results_list if x[3] == max(aars))[4],
            "avg_val": avg(aars)
        }
    }

    return summary, results_list, final_map

// --------- End of File: ..\stock_market_simulator\simulation\simulator.py ---------


// --------- File: ..\stock_market_simulator\strategies\base_strategies.py ---------
# stock_market_simulator/strategies/base_strategies.py

from stock_market_simulator.simulation.portfolio import Order, Portfolio

def buy_hold_strategy(portfolio: Portfolio, date, price, day_index):
    """
    Buy-and-hold strategy: buy everything on the first day, then do nothing.
    """
    if day_index == 0 and 'initialized' not in portfolio.strategy_state:
        portfolio.strategy_state['initialized'] = True
        o = Order(side='buy', order_type='market', quantity=None)
        portfolio.orders.append(o)

def advanced_daytrading(portfolio: Portfolio, date, price, day_index):
    """
    An advanced strategy that uses trailing stops and limit buy after selling.
    """
    st = portfolio.strategy_state
    if day_index == 0 and "initialized" not in st:
        st["initialized"] = True
        st["position"] = "none"
        st["pending_limit"] = False
        st["limit_buy_day"] = None
        st["limit_buy_price"] = None
        st["last_sell_price"] = None

        o = Order(side='buy', order_type='market', quantity=None)
        o.placement_day = day_index
        portfolio.orders.append(o)
        st["position"] = "waiting_buy"
        return

    have_shares = (portfolio.shares > 0.00001)

    if st.get("position") != "long" and have_shares:
        st["position"] = "long"
        ts = Order(side='sell', order_type='trailing_stop',
                   trail_percent=10.0, quantity=None)
        ts.placement_day = day_index
        portfolio.orders.append(ts)

    if st.get("position") == "long" and not have_shares:
        st["position"] = "none"
        st["last_sell_price"] = price
        limit_price = price * 0.95
        lb = Order(side='buy', order_type='limit', limit_price=limit_price)
        lb.placement_day = day_index
        portfolio.orders.append(lb)

        st["pending_limit"] = True
        st["limit_buy_day"] = day_index
        st["limit_buy_price"] = limit_price

    if st.get("pending_limit"):
        limit_day = st["limit_buy_day"]
        if limit_day is not None and (day_index - limit_day) >= 30:
            # Cancel the old limit order
            to_cancel = []
            for od in portfolio.orders:
                if od.order_type == 'limit' and od.side == 'buy' and od.placement_day == limit_day:
                    to_cancel.append(od)
            for c in to_cancel:
                portfolio.orders.remove(c)

            mk = Order(side='buy', order_type='market')
            mk.placement_day = day_index
            portfolio.orders.append(mk)
            st["pending_limit"] = False
            st["limit_buy_day"] = None
            st["limit_buy_price"] = None


def advanced_daytrading10(portfolio: Portfolio, date, price, day_index):
    """
    Similar to advanced_daytrading but reverts to a market order after 10 days.
    """
    st = portfolio.strategy_state
    if day_index == 0 and "initialized" not in st:
        st["initialized"] = True
        st["position"] = "none"
        st["pending_limit"] = False
        st["limit_buy_day"] = None
        st["limit_buy_price"] = None
        st["last_sell_price"] = None

        o = Order(side='buy', order_type='market', quantity=None)
        o.placement_day = day_index
        portfolio.orders.append(o)
        st["position"] = "waiting_buy"
        return

    have_shares = (portfolio.shares > 0.00001)

    if st.get("position") != "long" and have_shares:
        st["position"] = "long"
        ts = Order(side='sell', order_type='trailing_stop',
                   trail_percent=10.0, quantity=None)
        ts.placement_day = day_index
        portfolio.orders.append(ts)

    if st.get("position") == "long" and not have_shares:
        st["position"] = "none"
        st["last_sell_price"] = price
        limit_price = price * 0.95
        lb = Order(side='buy', order_type='limit', limit_price=limit_price)
        lb.placement_day = day_index
        portfolio.orders.append(lb)

        st["pending_limit"] = True
        st["limit_buy_day"] = day_index
        st["limit_buy_price"] = limit_price

    if st.get("pending_limit"):
        limit_day = st["limit_buy_day"]
        if limit_day is not None and (day_index - limit_day) >= 10:
            to_cancel = []
            for od in portfolio.orders:
                if od.order_type == 'limit' and od.side == 'buy' and od.placement_day == limit_day:
                    to_cancel.append(od)
            for c in to_cancel:
                portfolio.orders.remove(c)

            mk = Order(side='buy', order_type='market')
            mk.placement_day = day_index
            portfolio.orders.append(mk)
            st["pending_limit"] = False
            st["limit_buy_day"] = None
            st["limit_buy_price"] = None


def advanced_daytrading20(portfolio: Portfolio, date, price, day_index):
    """
    Similar to advanced_daytrading but reverts to a market order after 20 days.
    """
    st = portfolio.strategy_state
    if day_index == 0 and "initialized" not in st:
        st["initialized"] = True
        st["position"] = "none"
        st["pending_limit"] = False
        st["limit_buy_day"] = None
        st["limit_buy_price"] = None
        st["last_sell_price"] = None

        o = Order(side='buy', order_type='market', quantity=None)
        o.placement_day = day_index
        portfolio.orders.append(o)
        st["position"] = "waiting_buy"
        return

    have_shares = (portfolio.shares > 0.00001)

    if st.get("position") != "long" and have_shares:
        st["position"] = "long"
        ts = Order(side='sell', order_type='trailing_stop',
                   trail_percent=10.0, quantity=None)
        ts.placement_day = day_index
        portfolio.orders.append(ts)

    if st.get("position") == "long" and not have_shares:
        st["position"] = "none"
        st["last_sell_price"] = price
        limit_price = price * 0.95
        lb = Order(side='buy', order_type='limit', limit_price=limit_price)
        lb.placement_day = day_index
        portfolio.orders.append(lb)

        st["pending_limit"] = True
        st["limit_buy_day"] = day_index
        st["limit_buy_price"] = limit_price

    if st.get("pending_limit"):
        limit_day = st["limit_buy_day"]
        if limit_day is not None and (day_index - limit_day) >= 20:
            to_cancel = []
            for od in portfolio.orders:
                if od.order_type == 'limit' and od.side == 'buy' and od.placement_day == limit_day:
                    to_cancel.append(od)
            for c in to_cancel:
                portfolio.orders.remove(c)

            mk = Order(side='buy', order_type='market')
            mk.placement_day = day_index
            portfolio.orders.append(mk)
            st["pending_limit"] = False
            st["limit_buy_day"] = None
            st["limit_buy_price"] = None


STRATEGY_MAP = {
    "buy_hold": buy_hold_strategy,
    "advanced_daytrading": advanced_daytrading,
    "advanced_daytrading10": advanced_daytrading10,
    "advanced_daytrading20": advanced_daytrading20
}

// --------- End of File: ..\stock_market_simulator\strategies\base_strategies.py ---------


// --------- File: ..\stock_market_simulator\utils\config_parser.py ---------
# stock_market_simulator/utils/config_parser.py

import os
from stock_market_simulator.strategies.base_strategies import STRATEGY_MAP

def parse_config_file(config_path):
    """
    Parses a config file of the form:
      years=5
      stepsize=1
      approach=SomeName
          ticker=^GSPC, strategy=buy_hold
          ticker=^IXIC, strategy=advanced_daytrading
      ...
    Returns: (years, stepsize, approaches)
      where approaches = [(approach_name, {ticker: strategy_func}), ...]
    """
    years = None
    stepsize = None
    approaches = []

    current_approach_name = None
    current_ticker_dict = {}

    def flush_approach():
        nonlocal current_approach_name, current_ticker_dict, approaches
        if current_approach_name is not None and current_ticker_dict:
            approaches.append((current_approach_name, current_ticker_dict))
        current_approach_name = None
        current_ticker_dict = {}

    with open(config_path, 'r') as f:
        for line in f:
            line_strip = line.strip()
            if not line_strip or line_strip.startswith('#'):
                continue

            # approach=ApproachName
            if line_strip.lower().startswith("approach="):
                flush_approach()
                approach_name = line_strip[len("approach="):].strip()
                current_approach_name = approach_name

            # ticker=^GSPC, strategy=buy_hold
            elif line_strip.lower().startswith("ticker="):
                if current_approach_name is None:
                    print(f"Warning: found ticker= line but no approach block open => {line_strip}")
                    continue

                portion = line_strip[len("ticker="):].strip()
                parts = [p.strip() for p in portion.split(',')]
                if len(parts) < 2:
                    print(f"Warning: invalid ticker line => {line_strip}")
                    continue

                ticker_str = parts[0]  # e.g. ^GSPC
                strategy_str = None
                for sp in parts[1:]:
                    if sp.lower().startswith("strategy="):
                        strategy_str = sp[len("strategy="):].strip()
                        break

                if not strategy_str:
                    print(f"Warning: missing 'strategy=' => {line_strip}")
                    continue

                if strategy_str not in STRATEGY_MAP:
                    print(f"Warning: unknown strategy '{strategy_str}' => {line_strip}")
                    continue

                current_ticker_dict[ticker_str] = STRATEGY_MAP[strategy_str]

            # maybe years=5 or stepsize=1
            elif '=' in line_strip:
                key, val = line_strip.split('=', 1)
                key = key.strip().lower()
                val = val.strip()
                if key == 'years':
                    years = int(val)
                elif key == 'stepsize':
                    stepsize = int(val)
                else:
                    print(f"Warning: unknown config param => {key}")

            else:
                print(f"Warning: ignoring line => {line_strip}")

    # flush last approach
    flush_approach()

    # final checks
    if years is None or years <= 0:
        raise ValueError("Config missing 'years' or it's <= 0.")

    if stepsize is None or stepsize < 1:
        raise ValueError("Config missing 'stepsize' or it's <1.")

    if not approaches:
        raise ValueError("No approaches defined in config.")

    return years, stepsize, approaches

// --------- End of File: ..\stock_market_simulator\utils\config_parser.py ---------


// --------- File: ..\stock_market_simulator\__init__.py ---------
# stock_market_simulator/__init__.py

"""
Stock Market Simulator Package

This package provides modules for:
- Data fetching (local or Yahoo Finance)
- Portfolio, Orders, and Execution logic
- Multiple strategies (e.g., Buy & Hold, Advanced Day Trading)
- Simulation driver
- Configuration parsing
"""

__version__ = "0.1.0"

// --------- End of File: ..\stock_market_simulator\__init__.py ---------

